os.loadAPI("loader")
SpeedOS = loader.OS()

SpeedOS.LoadAPI('/System/API/Drawing')
SpeedOS.LoadAPI('/System/API/Button')
SpeedOS.LoadAPI('/System/API/Helpers')
SpeedOS.LoadAPI('/System/API/TextInput')
SpeedOS.LoadAPI('/System/API/TextBox')

Current = {
	Clicks = {},
	Input = nil,
	CursorPos = {},
	CursorColour = colours.black
}

Events = {
	
}

InterfaceElements = {
	
}


function Initialise()
	EventRegister('mouse_click', TryClick)
	EventRegister('mouse_drag', TryClick)
	EventRegister('monitor_touch', TryClick)
	EventRegister('mouse_scroll', Scroll)
	EventRegister('key', HandleKey)
	EventRegister('char', HandleKey)
	EventRegister('timer', Update)

	SpeedOS.ToolBarColour = colours.grey
	SpeedOS.ToolBarTextColour = colours.white

	settings = SpeedOS.Settings.Defaults

	local startX = 2
	local startY = 5
	local controlX = startX + 16
	local values = SpeedOS.Settings:GetValues()
	for k, v in pairs(settings) do
		local value = values[k]
		if v.Type == 'Bool' then
			settings[k].Control = Button:Initialise(controlX, startY, 5, 1, colours.red, colours.white, colours.green, colours.white, nil, function(self, x, y, toggle)
				if not self.Toggle then
					self.Text = 'Yes'
					self.Width = 5
				else
					self.Text = 'No'
					self.Width = 4
				end
				SpeedOS.Settings:SetValue(k, not self.Toggle)
				return true
			end, 'Yes', value)
			if not value then
				settings[k].Control.Text = 'No'
				settings[k].Control.Width = 4
			end
		elseif v.Type == 'Colour' then
			local x = controlX + 1
			_colours = {
				colours.white,
				colours.orange,
				colours.magenta,
				colours.lightBlue,
				colours.yellow,
				colours.lime,
				colours.pink,
				colours.grey,
				colours.lightGrey,
				colours.cyan,
				colours.purple,
				colours.blue,
				colours.brown,
				colours.red,
				colours.green,
				colours.black
			}
			for i, c in ipairs(_colours) do
				local txt = ''
				if c == colours.white then
					txt = '###'
				end
				settings[k].Controls[i] = Button:Initialise(x, startY, 2, 1, c, colours.lightGrey, nil, nil, nil, function(self, x, y)
					SpeedOS.Settings:SetValue(k, c)
					return true
				end, txt)
				x = x + 2
			end
				

		elseif v.Type == 'Text' then
			settings[k].Control = TextBox:Initialise(controlX, startY, 23, 1, nil, value, nil, nil, function(self, key)
				SpeedOS.Settings:SetValue(k, self.TextInput.Value)
			end)
		end
		startY = startY + 2
	end

	Update()
	EventHandler()
end

function Update()
	Draw()
	updateTimer = os.startTimer(1)
end

function Draw()
	Current.Clicks = {}
	Drawing.Clear(colours.white)

	Drawing.DrawBlankArea(1, 1, Drawing.Screen.Width, 3, colours.grey)
	Drawing.DrawCharacters(11, 2, 'SpeedOS', colours.lightGrey, colours.grey)
	Drawing.DrawCharacters(2, 2, 'Settings', colours.white, colours.grey)

	for i, elem in ipairs(InterfaceElements) do
		if elem.Draw then
			elem:Draw()
		end
	end

	local startX = 2
	local startY = 5
	for k, v in pairs(settings) do
		Drawing.DrawCharacters(startX, startY, v.Label, colours.black, colours.white)
		if v.Control and v.Control.Draw then
			v.Control:Draw()
		elseif v.Controls then
			for i, c in ipairs(v.Controls) do
				c:Draw()
			end
		end
		startY = startY + 2
	end
	Drawing.DrawBuffer()

	if Current.Input then
		term.setCursorPos(Current.CursorPos[1], Current.CursorPos[2])
		term.setCursorBlink(true)
		term.setTextColour(Current.CursorColour)
	else
		term.setCursorBlink(false)
	end
end

MainDraw = Draw

function RegisterElement(elem)
	table.insert(InterfaceElements, elem)
end

function UnregisterElement(elem)
	for i, e in ipairs(InterfaceElements) do
		if elem == e then
			InterfaceElements[i] = nil
		end
	end
end

function RegisterClick(elem)
	table.insert(Current.Clicks, elem)
end

function CheckClick(object, x, y)
	local pos = GetAbsolutePosition(object)
	if pos.X <= x and pos.Y <= y and  pos.X + object.Width > x and pos.Y + object.Height > y then
		return true
	end
end

function DoClick(event, object, side, x, y)
	if object and CheckClick(object, x, y) then
		return object:Click(side, x - object.X + 1, y - object.Y + 1)
	end	
end

function TryClick(event, side, x, y)
	for i, object in ipairs(Current.Clicks) do
		if DoClick(event, object, side, x, y) then
			Draw()
			return
		end		
	end
end

function HandleKey(...)
	local args = {...}
	local event = args[1]
	local keychar = args[2]

	if Current.Input then
		if event == 'char' then
			Current.Input:Char(keychar)
		elseif event == 'key' then
			Current.Input:Key(keychar)
		end
	elseif keychar == keys.up then
		Scroll('mouse_scroll', -1)
	elseif keychar == keys.down then
		Scroll('mouse_scroll', 1)
	end
end

function GetAbsolutePosition(obj)
	if not obj.Parent then
		return {X = obj.X, Y = obj.Y}
	else
		local pos = GetAbsolutePosition(obj.Parent)
		local x = pos.X + obj.X - 1
		local y = pos.Y + obj.Y - 1
		return {X = x, Y = y}
	end
end

function EventRegister(event, func)
	if not Events[event] then
		Events[event] = {}
	end

	table.insert(Events[event], func)
end

function EventHandler()
	while true do
		local event = { coroutine.yield() }
		if Events[event[1]] then
			for i, e in ipairs(Events[event[1]]) do
				e(event[1], event[2], event[3], event[4], event[5])
			end
		end
	end
end

Initialise()
