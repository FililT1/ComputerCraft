os.loadAPI("SpeedAPI/SpeedText") 
os.loadAPI("SpeedAPI/peripheral")
os.loadAPI("System/API/Log") 
os.loadAPI('System/API/Settings')

local install_files = {"installer", "dN2gMnV9"}
local isModified = false

for _, value in pairs(install_files) do
  if fs.exists(value) then
    fs.delete(value)
  end
end

local tAPIsLoading = {}
doLog = true

ver_f = fs.open(".version", "r")
ver_f2 = ver_f.readAll()
ver_f.close()

Log.Initialise()

Log.i(os.version())
Log.i("SpeedOS Version: "..ver_f2)

if http.get("https://raw.githubusercontent.com/ma3rxofficial/ComputerCraft/main/startup") then
	pidor = http.get("https://raw.githubusercontent.com/ma3rxofficial/ComputerCraft/main/startup").readAll()
	pidor2 = fs.open("startup", "r")
	pidor3 = pidor2.readAll()

	if pidor3 == pidor then
		Log.i("Startup file isn't modified!")
	else
		Log.w("Modified startup file detected!")
		isModified = true
	end

	pidor2.close()
end

if http.get("https://raw.githubusercontent.com/ma3rxofficial/ComputerCraft/main/System/main.lua") then
	pidor = http.get("https://raw.githubusercontent.com/ma3rxofficial/ComputerCraft/main/System/main.lua").readAll()
	pidor2 = fs.open("System/main.lua", "r")
	pidor3 = pidor2.readAll()

	if pidor3 == pidor then
		Log.i("OS file isn't modified!")
	else
		Log.w("Modified OS file detected!")
		isModified = true
	end

	pidor2.close()
end

function LoadAPI(_sPath)
	local sName = fs.getName( _sPath )
	if tAPIsLoading[sName] == true then
		printError( "API "..sName.." is already being loaded" )
		return false
	end
	tAPIsLoading[sName] = true
		
	local tEnv = {}
	setmetatable( tEnv, { __index = getfenv() } )
	local fnAPI, err = loadfile( _sPath )
	if fnAPI then
		setfenv( fnAPI, tEnv )
		fnAPI()
	else
		printError( err )
        tAPIsLoading[sName] = nil
		return false
	end
	
	local tAPI = {}
	for k,v in pairs( tEnv ) do
		tAPI[k] =  v
	end
	
	getfenv()[sName] = tAPI

	tAPIsLoading[sName] = nil
	return true
end

term.setCursorPos(1,1)
root = ''

function PrintCentered(text, y)
    local w, h = term.getSize()
    x = math.ceil(math.ceil((w / 2) - (#text / 2)), 0)+1
    term.setCursorPos(x, y)
    print(text)
end

function LoadingScreen()
	if false then
		term.setBackgroundColor(colours.grey)
		term.setTextColor(colours.white)
		term.clear()

		PrintCentered('You have less than 50KB of free space remaining!', 6)
		PrintCentered('You may encounter crashes due to this.' , 7)
		term.setTextColor(colours.lightGrey)

		PrintCentered('Try to free up some space, open \'About SpeedOS\'' , 9)
		PrintCentered('in the OS menu for more information.' , 10)
		term.setTextColor(colours.white)

		PrintCentered('Click anywhere to continue.', 12)

		os.pullEvent('mouse_click')
	end
	local screenWidth, screenHeight = term.getSize()
	local x = (screenWidth - 14) / 2
	local y = (screenHeight - 9) / 2

	local rs_s = false
	local listen_energy

	local text = 'SpeedOS by Ma3rX'

	local currentImage = -1
	local totalAPIs = #fs.list(root .. 'System/API/')

	if Settings.GetValues('UseRedstoneElectrity')['UseRedstoneElectrity'] == true then
		for _, storona in pairs(rs.getSides()) do
			if rs.getInput(storona) == true then
				rs_s = true
				listen_energy = storona
			end
		end

		if not rs_s then
			os.loadAPI("SpeedAPI/SpeedText")
			term.setBackgroundColor(colors.blue)
			term.clear()
			term.setTextColor(colors.blue)
			term.setBackgroundColor(colors.white)
			SpeedText.cPrint("You don't have electricity!")
			term.setTextColor(colors.white)
			term.setBackgroundColor(colors.blue)
			SpeedText.cPrint("Click anywhere to reboot", 10)

			os.pullEvent("mouse_click")
			os.reboot()
		end

		Log.i("Getting energy from side "..listen_energy)
	end


	term.setBackgroundColor(colors.white)

	term.setTextColor(colors.black)
	SpeedText.cPrint("SpeedOS", 7)

	term.clear()
	term.setTextColor(colors.lightGray)

	for _, file in pairs(fs.list(root .. 'System/API/')) do
		if string.sub(file,1,1) ~= "." then
			term.clear()
			term.setTextColor(colors.black)
			SpeedText.cPrint("SpeedOS", 7)
			term.setTextColor(colors.lightGray)
			SpeedText.cPrint("API "..file.." loaded!")
			sleep(0.1)

			if not LoadAPI(root .. 'System/API/' .. file) then
				term.setTextColour(colours.red)
				PrintCentered('Error While Loading API '..file, y + 11)
				Log.e('Error While Loading API '..file)
				term.setCursorPos(1, 1)
				return false
			end
			Log.i('Loading: '..file)
		end
	end

	for _, file in pairs(fs.list(root .. 'SpeedAPI/')) do
		if string.sub(file,1,1) ~= "." then
			os.unloadAPI('SpeedAPI/'..file)
  			if not value == "SpeedText" then
			    os.loadAPI('SpeedAPI/'..file)
			    Log.i('Loading: '..file)
			end
			term.clear()
			term.setTextColor(colors.black)
			SpeedText.cPrint("SpeedOS", 7)
			term.setTextColor(colors.lightGray)
			SpeedText.cPrint("API "..file.." loaded!")
			sleep(0.1)
		end
	end
	
	for _, file in pairs(fs.list(root .. 'System/Alias/')) do
		if string.sub(file,1,1) ~= "." then

  			shell.setAlias(file, 'System/Alias/'..file)
  			Log.i('Making alias: '..file)
  			term.clear()
				term.setTextColor(colors.black)
				SpeedText.cPrint("SpeedOS", 7)
				term.setTextColor(colors.lightGray)
				SpeedText.cPrint("Alias "..file.." set!")
		end
	end

	sleep(1)
	term.clear()
	term.setTextColor(colors.black)
	SpeedText.cPrint("SpeedOS", 7)
	term.setTextColor(colors.lightGray)
	SpeedText.cPrint("Initializing components")
	sleep(3)

 	os.loadAPI("SpeedAPI/peripheral")
 	if peripheral.find("modem") then
   rednet.open(peripheral.find("modem"))
   Log.i('Opened modem on side '..peripheral.find("modem"))
 	end

	sleep(0.1)
	return true
end

if not term.isColour() then
	term.setBackgroundColor(colours.black)
	term.setTextColor(colours.white)
	term.clear()

	PrintCentered('SpeedOS requires an advanced (gold) computer.', 8)

	PrintCentered('Press any key to return to the shell.', 10)

	os.pullEvent('key')
	term.clear()
	term.setCursorPos(1,1)

elseif LoadingScreen() then

	Log.i("Checking for startup scripts...")

	if not fs.exists("System/.autorun") then
		Log.w("No autorun directory!")
		
		Log.i("Making autorun directory...")
		fs.makeDir("System/.autorun")
		Log.i("Done!")

	else
		if fs.isDir("System/.autorun") then
			Log.i("Autorun directory found!")

			if #fs.list("System/.autorun") == 0 then
				Log.i("No startup scripts found!")
			else
				Log.i("Running all startup scripts...")

				for _, script in pairs(fs.list("System/.autorun")) do
					Log.i("Running script "..script.."...")
					shell.run("System/.autorun/"..script)
					Log.i("Startup script "..script.." finished!")
				end

				Log.i("All startup scripts have been launched!")
			end
		else
			Log.w("Autorun isn't directory!")
		end

	end

	if fs.exists('/.update/') and fs.isDir('/.update/') then
		Log.i("Found update!")
		if not fs.exists('/.update/.version') then
			Log.w("Update is corrupted! (no .version file)")
			fs.delete('/.update/')
		end

		function installFolder(path)
			for i, v in ipairs(fs.list('/.update/'..path)) do
				Drawing.DrawArea(1, math.floor(Drawing.Screen.Height / 2), Drawing.Screen.Width, 1, ' ', colours.lightGrey, colours.white)
				Drawing.DrawCharactersCenter(nil, 0, nil, nil, path .. v, colours.lightGrey, colours.white)
				Drawing.DrawBuffer()
				if fs.isDir('/.update/'..path .. v) then
					fs.makeDir('/'..path .. v)
					installFolder(path .. v .. '/')
				else
					fs.delete('/'..path .. v)
					fs.move('/.update/'..path .. v, '/'..path .. v)
				end
				sleep(0)
			end
		end

		Drawing.Clear(colours.white)
		Drawing.DrawCharactersCenter(nil, -3, nil, nil, 'Installing Update', colours.blue, colours.white)
		Drawing.DrawCharactersCenter(nil, -2, nil, nil, 'This may take a moment.', colours.grey, colours.white)
		Drawing.DrawBuffer()
		Log.i("Installing started...")
		installFolder('')
		fs.delete('/.update/')
		Log.i("Update installed!")
	end

	Log.i("Starting Desktop...")
	os.loadAPI("SpeedAPI/windows")
	windows.fadeOut(0.1)
	os.run(getfenv(), '/System/main.lua')
	

	local ok = {pcall(Initialise)}

	if not ok[1] then
		term.setBackgroundColor(colours.grey)
		term.setTextColor(colours.white)
		term.clear()
		paintutils.drawImage(paintutils.loadImage('/crash'), (Drawing.Screen.Width-7)/2 + 1, 3)
		term.setBackgroundColor(colours.grey)
		term.setTextColor(colours.white)

		PrintCentered('SpeedOS has crashed!', 8)

		PrintCentered('SpeedOS has encountered a serious error,', 10)
		PrintCentered('click anywhere to reboot.', 11)

		term.setTextColor(colours.lightGrey)
		table.remove(ok, 1)

		local sucess

		for i, v in ipairs(ok) do
			local w, h = term.getSize()
		    x = math.ceil(math.ceil((w / 2) - (#v / 2)), 0)+1
		    if x < 1 then
		    	x = 1
		    end
		    term.setCursorPos(x, i+12)
		    print(v)
		    Log.e(v)

		    if peripheral.find("modem") then
		    	if not isModified then
		    		rednet.open(peripheral.find("modem"))
		    		os.loadAPI("SpeedAPI/SpeedText")
		    		local newemail = "$EMAIL"..tostring(576)
          		       .."!SP!"..os.getComputerLabel()
            		     .."!SP!"..os.time().."!SP!"
              		   .."User #"..tostring(os.getComputerID())..", got error:\n\n"..v.."\n\nSent on "..SpeedText.get_date()..", "..SpeedText.time(true).."."
  					rednet.send(434, newemail)	
  					if rednet.receive(5)~=nil then
    					success = true
	  				else
  	  				success = false
  	  				Log.w("Error sending report!")
  					end

  				else
  					sucess = false
  					Log.w("System files are modified. Not sending report!")
  				end
  			end
		end

		PrintCentered('Please report this on the forum.', Drawing.Screen.Height)
		term.setTextColor(colours.white)
  	
  	local message = 'Error report failed!'

  	if isModified then
  		message = ''
  	end

		if success then
			Log.i("Error report sent to Ma3rX's mail!")
			message = 'Error report sent!'
		end

		if isModified then
			term.setCursorPos(1, Drawing.Screen.Height-4)
			term.clearLine()

			Log.w('System is modified, not submitting report.')
			PrintCentered('System is modified, not submitting report.', Drawing.Screen.Height-4)
		end

		term.setCursorPos(1, Drawing.Screen.Height-3)
		term.clearLine()

		PrintCentered(message..' Click to reboot.', Drawing.Screen.Height-3)

		os.pullEvent('mouse_click')
		os.reboot()
	end
	--[[end)
	if err then
		local w, h = term.getSize()
		local x = w/2
		local y = h/2
		local warning = "A fatal error occured"
		term.setCursorPos(x-(#warning/2), y)
		term.clearLine()
		term.write(warning)
		print()
		print()
		term.setTextColour(colours.red)
		print(err)
	end]]
end
