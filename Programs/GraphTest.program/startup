-----------------------------------------------------------------------------------------------------------------------------------

SpeedOS.LoadAPI("SpeedAPI/graph")
SpeedOS.LoadAPI("SpeedAPI/peripheral")
SpeedOS.LoadAPI("SpeedAPI/config")
SpeedOS.LoadAPI("SpeedAPI/windows")

local tab = 0
local use_mon_default
local pathToConfig = "System/GraphTest.settings"

huy = config.read(pathToConfig, "use monitor by default")
huy2 = tonumber(config.read(pathToConfig, "max"))

-----------------------------------------------------------------------------------------------------------------------------------

if huy == "true" then
  use_mon_default = true
else
  use_mon_default = false
end

-----------------------------------------------------------------------------------------------------------------------------------

--our update function
function update()
  tab = tab + 1
  return tab
end

-----------------------------------------------------------------------------------------------------------------------------------

--our graph declaration.  We use nil as the gradientTable parameter, so it will use the default red-green gradient.
local graphInstance

if peripheral.find("monitor", true) and use_mon_default then
  graphInstance = graph.new(peripheral.wrap(peripheral.find("monitor", true)), update, "Testing", nil, 0, huy2)

else
  graphInstance = graph.new(term, update, "Testing", nil, 0, huy2)

end

-----------------------------------------------------------------------------------------------------------------------------------

if peripheral.find("monitor", true) and use_mon_default then
  windows.clearScreen(colors.white)
  term.setTextColor(colors.lightGray)
  SpeedText.cPrint("Running graph on monitor(side "..peripheral.find("monitor", true)..")")
else
  if SpeedOS then
    SpeedOS.ToolBarColour = colours.black
    SpeedOS.ToolBarTextColour = colours.white
  end
end

-----------------------------------------------------------------------------------------------------------------------------------

while true do
  --update the graph
  graphInstance:draw()
  sleep(0.5)
end
