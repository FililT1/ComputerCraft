local SUPPORTED = {"LS", "DIR", "HELP"}
local tCommandHistory = {}

function GETCOMMANDS()
    return SUPPORTED
end

function ISFILEEXISTS(FN)
    for _, TEMP in pairs(fs.list("/")) do
        if TEMP == FN then
            return true
        end
    end

    return false
end

function ISFILEOK(FN)
    local OK, ERR = pcall(loadfile(FN))
    if not OK then
        if ERR and ERR ~= "" then
            return false
        end

        return false
    end

    return true
end

function SUPPORTEDCOMMANDS(COMMAND)
    for _, TEMP in pairs(SUPPORTED) do
        if TEMP == COMMAND then
            return true
        end
    end

    return false
end

function ISLUAFUNCTION(COMMAND)
    FINDER = string.sub(COMMAND, 1, 1)

    if FINDER == "=" then
        return true
    else
        return false
    end
end

function MAKELUAFUNCTION(COMMAND)
    return string.sub(COMMAND, 2)
end

function RUNLUAFUNCTION(S) 
    local TCOMMANDSHISTRY = {}
    local TENV = {
        ["exit"] = function()
            BRUNNING = false
        end,
    }
    setmetatable(TENV, {__index=getfenv()})

    local NFORCEPRINT = 0
    local FUNC, E = loadstring( S, "lua" )
    local FUNC2, E2 = loadstring( "return "..s, "lua" )
    if not FUNC then
        if FUNC2 then
            FUNC = funFUNC2c2
            E = nil
            NFORCEPRINT = 1
        end
    else
        if FUNC2 then
            FUNC = FUNC2
        end
    end
    
    if FUNC then
        setfenv(func, tEnv)
        local TRESULTS = {pcall(function() return func() end)}
        if TRESULTS[1] then
            local n = 1
            while TRESULTS[n + 1] ~= nil or n <= NFORCEPRINT do
                PRINT(tostring(TRESULTS[n + 1] ))
                n = n + 1
            end
        else
            PRINT('FUNC "'..S..'" ERROR')
        end
    else
        PRINT('FUNC "'..S..'" ERROR')
    end

    PRINT("\nPROGRAM FINISHED")
end

function CLEAR()
    term.setBackgroundColor(colors.black)
    term.clear()
end

function CURSOR(POSX, POSY)
    term.setCursorPos(POSX, POSY)
end

function READ(_sReplaceChar, _tHistory)
    term.setCursorBlink( true )

    local sLine = ""
    local nHistoryPos = nil
    local nPos = 0
    if _sReplaceChar then
        _sReplaceChar = string.sub( _sReplaceChar, 1, 1 )
    end
    
    local w, h = term.getSize()
    local sx, sy = term.getCursorPos()  
    
    local function redraw( _sCustomReplaceChar )
        local nScroll = 0
        if sx + nPos >= w then
            nScroll = (sx + nPos) - w
        end
            
        CURSOR( sx, sy )
        local sReplace = _sCustomReplaceChar or _sReplaceChar
        if sReplace then
            term.write( string.upper(string.rep(sReplace, string.len(sLine) - nScroll)) )
        else
            term.write( string.upper(string.sub( sLine, nScroll + 1 )) )
        end
        CURSOR( sx + nPos - nScroll, sy )
    end
    
    while true do
        local sEvent, param = os.pullEvent()
        if sEvent == "char" then
            sLine = string.upper(string.sub( sLine, 1, nPos ) .. param .. string.sub( sLine, nPos + 1 ))
            nPos = nPos + 1
            redraw()
            
        elseif sEvent == "key" then
            if param == keys.enter then
                -- Enter
                break
                
            elseif param == keys.left then
                -- Left
                if nPos > 0 then
                    nPos = nPos - 1
                    redraw()
                end
                
            elseif param == keys.right then
                -- Right                
                if nPos < string.len(sLine) then
                    nPos = nPos + 1
                    redraw()
                end
            
            elseif param == keys.up or param == keys.down then
                -- Up or down
                if _tHistory then
                    redraw(" ");
                    if param == keys.up then
                        -- Up
                        if nHistoryPos == nil then
                            if #_tHistory > 0 then
                                nHistoryPos = #_tHistory
                            end
                        elseif nHistoryPos > 1 then
                            nHistoryPos = nHistoryPos - 1
                        end
                    else
                        -- Down
                        if nHistoryPos == #_tHistory then
                            nHistoryPos = nil
                        elseif nHistoryPos ~= nil then
                            nHistoryPos = nHistoryPos + 1
                        end                     
                    end
                    
                    if nHistoryPos then
                        sLine = _tHistory[nHistoryPos]
                        nPos = string.len( sLine ) 
                    else
                        sLine = ""
                        nPos = 0
                    end
                    redraw()
                end
            elseif param == keys.backspace then
                -- Backspace
                if nPos > 0 then
                    redraw(" ");
                    sLine = string.sub( sLine, 1, nPos - 1 ) .. string.sub( sLine, nPos + 1 )
                    nPos = nPos - 1                 
                    redraw()
                end
            elseif param == keys.home then
                -- Home
                nPos = 0
                redraw()        
            elseif param == keys.delete then
                if nPos < string.len(sLine) then
                    redraw(" ");
                    sLine = string.sub( sLine, 1, nPos ) .. string.sub( sLine, nPos + 2 )               
                    redraw()
                end
            elseif param == keys["end"] then
                -- End
                nPos = string.len(sLine)
                redraw()
            end
        end
    end
    
    term.setCursorBlink( false )
    CURSOR( w + 1, sy )
    PRINT()
    
    return string.upper(sLine)
end

function GETSIZE()
    return term.getSize()
end

function GETCOMMANDLIST()
    return supportedList
end

function PROGRAMERROR()
    print("FILE HAS ERROR")
end

function PROGRAMNOTFOUND()
    print("FILE NOT FOUND")
end

function LOGO()
    print("RADIO-86RK")
end

function SLEEP(num)
    os.sleep(num)
end

function LOADING(num)
    CURSOR(1, 1)
    PRINT("Loading...")
    SLEEP(num)
end

function PRINT(_string)
    term.setTextColor(colors.white)
    term.setBackgroundColor(colors.black)

    if _string then
        print(string.upper(_string))
    end
end

function LINE()
    print("---------------------------------------------------")
end

function CPRINT(string, y2)
    local tX, tY = term.getSize()
    local b = string.len(string) / 2
    local x = (tX / 2) - b
    local y = tY / 2
    
    if y2 then
      y = y2
    end

        CURSOR(x, y)
        write(string)
end

function WAITFORCMD()
    term.write("-->")
    comanda = READ(nil, tCommandHistory)
	table.insert(tCommandHistory, comanda)

    return comanda
end

function RUN(filename)
    if ISFILEEXISTS(filename) then
        if ISFILEOK(filename) then
            PRINT("\nPROGRAM FINISHED")
        else
            PROGRAMERROR()
        end
    else
        if SUPPORTEDCOMMANDS(filename) then
            shell.run("RESOURCES/COMMANDS/"..filename..".RK")
        else
            if filename == "" or filename == " " then
                filename = ""
            else
                PROGRAMNOTFOUND()
            end
        end
    end
end
