os.loadAPI("/SpeedAPI/peripheral")

io.write("Please write password: ")
code = io.read()

io.write("Please enter code which will exit from program: ")
exitCode = io.read()

io.write("Please enter monitor side: ")
sideMonitor = io.read() --"left:orange" --peripheral.find("monitor")

io.write("Please enter alarm side: ")
sideAlarm = io.read()

if sideAlarm == "" then
  sideAlarm = nil
end

io.write("Please enter redstone side: ")
sideRedstone = io.read()

defaultRedstone = false
openRedstone = true
local usedColors = { }
usedColors.ENTER = colors.green
usedColors.CANCEL = colors.red
usedColors.NUM = colors.black
usedColors.CORRECT = colors.green
usedColors.WRONG = colors.red
usedColors.INPUT = colors.blue
usedColors.EXIT = colors.cyan
usedColors.BACKGROUND = colors.black

rs.setOutput(sideRedstone, defaultRedstone)

mon = peripheral.wrap( sideMonitor )
input = ""
running = true

function render( )
 mon.setTextColor( colors.yellow )
 mon.setBackgroundColor( usedColors.BACKGROUND )
 mon.clear( )
 mon.setCursorPos( 1, 1 )
 mon.setBackgroundColor( usedColors.INPUT )
 mon.clearLine( )
 mon.setCursorPos( 3, 2 )
 mon.setBackgroundColor( usedColors.NUM )
 mon.write( "123" )
 
 mon.setCursorPos( 3, 3 )
 mon.write( "456" )
 
 mon.setCursorPos( 3, 4 )
 mon.write( "789" )
 
 mon.setCursorPos( 3, 5 )
 mon.setTextColor(colors.white)
 mon.setBackgroundColor( usedColors.ENTER )
 mon.write( "V" )
 mon.setBackgroundColor( usedColors.NUM )
 mon.setTextColor(colors.yellow)
 mon.write( "0" )
 mon.setTextColor(colors.white)
 mon.setBackgroundColor( usedColors.CANCEL )
 mon.write( "X" )
end
render()

function coordToNum( x, y )
 if y == 2 then
  if x == 3 then return 1 end
  if x == 4 then return 2 end
  if x == 5 then return 3 end
 end
 if y == 3 then
  if x == 3 then return 4 end
  if x == 4 then return 5 end
  if x == 5 then return 6 end
 end
 if y == 4 then
  if x == 3 then return 7 end
  if x == 4 then return 8 end
  if x == 5 then return 9 end
 end
 if y == 5 then
  if x == 3 then return -1 end
  if x == 4 then return 0 end
  if x == 5 then return -2 end
 end
 return -3
end

ev = { }

render( )

while running do
 
 ev = { os.pullEvent( ) }
 if ev[1] == "monitor_touch" then
  num = coordToNum( ev[3], ev[4] )
  if num > -1 and input:len() < 7 then
   input = input .. tostring( num )
   mon.setCursorPos( 1, 1 )
   mon.setBackgroundColor( usedColors.INPUT )
   mon.clearLine( )
   mon.write( input )
  else
   if num == -1 and input == code then
    mon.setCursorPos( 1, 1 )
    mon.setBackgroundColor( usedColors.CORRECT )
    mon.clearLine( )
    mon.write( "Correct" )
    input = ""
    print( "someone logged in succesfully" )
    rs.setOutput( sideRedstone, openRedstone )
    sleep( 5 )
    rs.setOutput( sideRedstone, defaultRedstone )
    mon.setCursorPos( 1 ,1 )
    mon.setBackgroundColor( usedColors.INPUT )
    mon.clearLine( )
    correct = true
   end
   if num == -1 and input == exitCode then running = false
    mon.setBackgroundColor( usedColors.EXIT )
    mon.setCursorPos( 1 ,1 )
    mon.clearLine( )
    mon.write( "  Exit" )
    error( )
   end
   if num == -1 and input ~= code and not correct and not exit then
    mon.setCursorPos( 1, 1 )
    mon.setBackgroundColor( usedColors.WRONG )
    mon.clearLine( )
    mon.write( " Wrong" ) 
    print( "someone tried to login with "..input )
    if sideAlarm then
      rs.setOutput(sideAlarm, true)
    end
    sleep(2)
    if sideAlarm then
      rs.setOutput(sideAlarm, false)
    end
    mon.setCursorPos( 1, 1 )
    mon.setBackgroundColor( usedColors.INPUT )
    mon.clearLine( )
    input = "" end
   if num == -2 then 
    input = "" 
    term.setCursorPos( 1, 1 )
    mon.setBackgroundColor( usedColors.INPUT )
    mon.clearLine( )
    print( "someone cleared the input" ) end
  end
 end
 correct = false
 sleep( 0.05 )
end