-----------------------------------------------------------------------------------------------------------------------------------

if SpeedOS then
	SpeedOS.ToolBarColour = colours.black
	SpeedOS.ToolBarTextColour = colours.white
end

-----------------------------------------------------------------------------------------------------------------------------------

SpeedOS.LoadAPI("SpeedAPI/config")

-----------------------------------------------------------------------------------------------------------------------------------

pathToConfig = "System/ORU.settings"

local cableSide = config.read(pathToConfig, "side")
local z_t = tonumber(config.read(pathToConfig, "t"))
local z_y = tonumber(config.read(pathToConfig, "y"))
local z_u = tonumber(config.read(pathToConfig, "u"))
local z_i = tonumber(config.read(pathToConfig, "i"))

os.pullEvent = os.pullEventRaw
term.clear()
term.setCursorPos(1,1)

while true do

	print("=========================================")
	print("ELECTRIC C I R C U I T     PROGRAM MCB   ")
	print("=========================================")
	print("[T]-INPUT 128 KEY")
	print("[Y]-INPUT 32 KEY")
	print("[U]-KEY ENGINE1")
	print("[I]-KEY ENGINE2")
	print("=========================================")

	local event, param1 = os.pullEvent("key") 
	if param1 == keys.t then
		print("128")
		rs.setBundledOutput(cableSide, z_t)
		sleep(0.3)
		rs.setBundledOutput(cableSide,0)
		print("OK")
		sleep(0.3)
		term.clear()
		term.setCursorPos(1,1)
	end

	if param1 == keys.y then
		print("32")
		rs.setBundledOutput(cableSide, z_y)
		sleep(0.3)
		rs.setBundledOutput(cableSide, 0)
		print("OK")
		sleep(0.3)
		term.clear()
		term.setCursorPos(1,1)
	end

	if param1 == keys.u then
		print("k eng1")
		rs.setBundledOutput(cableSide, z_u)
		sleep(0.3)
		rs.setBundledOutput(cableSide,0)
		print("OK")
		sleep(0.3)
		term.clear()
		term.setCursorPos(1,1)
	end

	if param1 == keys.i then
		print("k eng2")
		rs.setBundledOutput(cableSide, z_i)
		sleep(0.3)
		rs.setBundledOutput(cableSide,0)
		print("OK")
		sleep(0.3)
		term.clear()
		term.setCursorPos(1,1)
	end

	term.clear()
	term.setCursorPos(1, 1)
end
