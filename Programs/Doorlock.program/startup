-----------------------------------------------------------------------------------------------------------------------------------
-- Меняем цвет тулбара

if SpeedOS then
	SpeedOS.ToolBarColour = colours.white
	SpeedOS.ToolBarTextColour = colours.black
end

-----------------------------------------------------------------------------------------------------------------------------------
-- Подгружаем АПИ для работы программы

SpeedOS.LoadAPI("SpeedAPI/SpeedText")
SpeedOS.LoadAPI("SpeedAPI/windows")
SpeedOS.LoadAPI("SpeedAPI/config")
SpeedOS.LoadAPI("SpeedAPI/peripheral")

-----------------------------------------------------------------------------------------------------------------------------------
-- Информирование пользователя о том, что для корректной работы программы необходим беспроводной модем

if not peripheral.find("modem") then
  windows.clearScreen(colors.cyan)
  windows.error("You need wireless modem!")
  SpeedOS.Close()
end

-----------------------------------------------------------------------------------------------------------------------------------
-- Открываем порт у модема на найденной стороне

rednet.open(peripheral.find("modem"))

-----------------------------------------------------------------------------------------------------------------------------------
-- Хуйня с параметрами

pathToConfig = "System/Doorlock.settings" -- путь до файла конфигурации
door_side = config.read(pathToConfig, "side") -- сторона двери(ааа отсылка на гачи в кампутэркрафте чтоооооооооо бан!!!!)
PDA_s = config.read(pathToConfig, "PDA") -- айдишник компьютера(или черепашки, на ваш выбор), который будет управлять команду для открытия двери(фактически, это подача редстоун-сигнала)

-----------------------------------------------------------------------------------------------------------------------------------
-- Функция открытия двери

function openDoor()
	rs.setOutput(door_side, true) -- отправляем редстоун-сигнал на предпологаемую сторону расположения двери, которая должна быть открыта посредством программы
	sleep(6) -- #передышканахуй на 6 секунд
	rs.setOutput(door_side, false) -- отключаем редстоун-сигнал
end

-----------------------------------------------------------------------------------------------------------------------------------
-- Функция ожидания компьютеров, которые отправят нашему компьютеру команду для открытия двери

function wait()
	term.setTextColor(colors.green) -- ставим цвет текста на зеленый
 	windows.clearScreen(colors.white) -- чистим экран в белый
 	term.setCursorPos(1, 1) -- ставим позицию курсора на 1, 1
	print("["..SpeedText.time().."] Waiting for clients...") 

	while true do -- цикл ожидания сообщений
		event, id, msg, dist = os.pullEvent()
		if event == "rednet_message" and msg == "DOORLOCK%OPEN" and id == tonumber(PDA_s) then -- КОНСТИТУЦИЯ РФ
			term.setTextColor(colors.blue)
			print("["..SpeedText.time().."] "..tostring(id).." opened door!")
			openDoor()
			end
		end
	end
end

-----------------------------------------------------------------------------------------------------------------------------------

function PDA()
	eblo = windows.input("auto", "auto", "New PDA", 10, {"Id", ""}, {"Redstone side", ""})
	pdaID = tonumber(eblo[1])
	side = tostring(eblo[2])
	config.write(pathToConfig, "PDA", tostring(pdaID))
	config.write(pathToConfig, "side", side)
	door_side = config.read(pathToConfig, "side")
	PDA_s = config.read(pathToConfig, "PDA")
	term.setCursorPos(1, 18)
	term.setTextColor(colors.green)
	term.setBackgroundColor(colors.white)
	term.write("Sucessfuly saved to config!")
	sleep(1)
	draw()
end	

-----------------------------------------------------------------------------------------------------------------------------------

function draw()
	windows.fadeIn(0)
	term.setTextColor(colors.black)
	SpeedText.cPrint("DoorLock")
	sleep(0.5)
	windows.clearScreen(colors.white)
	pizda = windows.select({"Welcome to DoorLock!"},{"What you will do?"},{"Wait",colors.lightGray,colors.black},{"New PDA",colors.lightBlue,colors.black})
	if pizda == "Wait" then
		wait()
	else
		PDA()
	end
end

-----------------------------------------------------------------------------------------------------------------------------------

draw()

-----------------------------------------------------------------------------------------------------------------------------------